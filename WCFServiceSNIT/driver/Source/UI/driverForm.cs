//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Windows.Forms;
//using NSDriver.ServiceReference1;

namespace NSDriver {

    public partial class driverForm {
        #region ctor
        public driverForm() {
            InitializeComponent();
        }
        #endregion

        void exitClick(object sender, EventArgs ea) {
            CancelEventArgs cea = new CancelEventArgs();

            Application.Exit(cea);
            if (cea.Cancel) {
                return;
            }
            Application.Exit();
        }

        void smiFileCreateClient_Click(Object sender, EventArgs e) {
            if (_client == null) {
                _client = new SNITServiceClient();
                enableInitialUIItems();
            }
        }

        void enableInitialUIItems() {
            bool benable = _client != null;


            this.btnSvrAvail.Enabled = benable;
            this.gbLocations.Enabled = benable;
            this.gbSN.Enabled = benable;
            this.tbServer.Enabled = benable;
            this.tbDatabase.Enabled = benable;
            //    }
        }

        #region fields
        SNITServiceClient _client;
        #endregion

        void formLoad(object sender, EventArgs ea) {
            this.lbLocations.DisplayMember = "displayLocation";
            this.lbLocations.ValueMember = "locId";
            //_client = new SNITServiceClient();
            //this.btnSvrAvail.Enabled = _client.isAvailable();
            updateAvailableButtonText();
            enableInitialUIItems();

        }

        void updateAvailableButtonText() {
            if (_client == null)
                return;
            this.btnSvrAvail.Text = (_client.isAvailable() ? "Disable" : "Enable") + " Service";
        }

        [STAThread()]
        public static void Main(string[] args) {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new driverForm());
        }

        void btnSvrAvail_Click(object sender, EventArgs e) {

            _client.setAvailable(!_client.isAvailable());
            updateAvailableButtonText();
            if (_client.isAvailable()) {
                loadLocations();
                tbDatabase.Text = _client.databaseName();
                tbServer.Text = _client.serverName();
                btnAddLoc.Enabled = true;
                //btnUpdateLoc.Enabled = false;
            } else {
                lbLocations.Items.Clear();
                tbDatabase.Text = tbServer.Text = string.Empty;
                btnAddLoc.Enabled = false;
                btnUpdateLoc.Enabled = false;
            }
        }

        void loadLocations() {
            int[] ret = _client.locationIds();
            string locName, sublocName, emp1, emp2;


            foreach (int nLocId in ret) {
                locName = _client.dataForLocation(nLocId, out sublocName, out emp1, out emp2);
                lbLocations.Items.Add(new DisplayLocation(nLocId, locName, sublocName, emp1, emp2));
            }
            btnClearLocs.Enabled = ret.Length > 0;
        }

        void btnClearLocs_Click(object sender, EventArgs e) {
            _client.clearLocations();
            lbLocations.Items.Clear();
            btnClearLocs.Enabled = false;
        }

        void lbLocations_SelectedIndexChanged(object sender, EventArgs e) {
            Debug.Print("here");
            ListBox lb = sender as ListBox;
            DisplayLocation dl;
            if (lb != null) {
                Debug.Print("here");
                if (lb.SelectedItem != null && (dl = lb.SelectedItem as DisplayLocation) != null) {
                    this.tbLocation.Text = dl.locationName;
                    this.tbSubloc.Text = dl.sublocationName;
                    this.tbScanner.Text = dl.scannerName;
                    this.tbChecker.Text = dl.checkerName;
                }
            }
        }

        void btnAddLoc_Click(object sender, EventArgs e) {
            bool haveError = false;
            string locName, sublocName, emp1, emp2;
            int locNo;

            if (!Validate(true))
                return;
            this.errorProvider1.SetError(tbLocation, string.Empty);
            if (string.IsNullOrEmpty(locName = tbLocation.Text)) {
                this.errorProvider1.SetError(tbSN, "lcoation is null!");
                haveError |= true;
            }
            this.errorProvider1.SetError(tbSubloc, string.Empty);
            if (string.IsNullOrEmpty(sublocName = tbSubloc.Text)) {
                this.errorProvider1.SetError(tbSubloc, "sublocation is null!");
                haveError |= true;
            }
            this.errorProvider1.SetError(tbScanner, string.Empty);
            if (string.IsNullOrEmpty(emp1 = tbScanner.Text)) {
                this.errorProvider1.SetError(tbScanner, "scanner-name is null!");
                haveError |= true;
            }
            this.errorProvider1.SetError(tbChecker, string.Empty);
            if (string.IsNullOrEmpty(emp2 = tbChecker.Text)) {
                this.errorProvider1.SetError(tbChecker, "cehcker-name is null!");
                haveError |= true;
            }
            if (haveError)
                return;
            locNo = _client.addLocation(locName, sublocName, emp1, emp2);
            if (locNo < 0)
                MessageBox.Show("Unable to add location", "Ugh");
            else {
                lbLocations.Items.Add(new DisplayLocation(locNo, locName, sublocName, emp1, emp2));
            }
        }

        void btnClearList_Click(object sender, EventArgs e) {
            lbSN.Items.Clear();
        }

        void btnClearService_Click(object sender, EventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        void btnUpdateLoc_Click(object sender, EventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        void btnAddSingle_Click(object sender, EventArgs e) {
            string sn;
            bool haveError = false;

            Logger.log(MethodBase.GetCurrentMethod());
            if (!Validate(true))
                return;
            this.errorProvider1.SetError(tbSN, string.Empty);
            if (string.IsNullOrEmpty(sn = tbSN.Text)) {
                this.errorProvider1.SetError(tbSN, "serial-number is null!");
                haveError |= true;
            }
            if (haveError)
                return;
            lbSN.Items.Add(sn);
        }

        void btnAddServer_Click(object sender, EventArgs e) {
            bool haveError = false;

            //  Logger.log(MethodBase.GetCurrentMethod());

            //foreach(DisplayLocation dl0 in lbLocations.Items) {
            //    Debug.Print("here");

            //}
            DisplayLocation dl = lbLocations.SelectedItem as DisplayLocation;
            if (dl != null) {
                foreach (string anSN in lbSN.Items) {
                    var avar = _client.addSerialNumber(anSN, dl.locId);
                    Debug.Print("here");
                }
            }
            //this.errorProvider1.SetError(lbLocations,string.Empty);
            //if (
            //    string.IsNullOrEmpty(sn = tbSN.Text)) {
            //    this.errorProvider1.SetError(tbSN, "serial-number is null!");
            //    haveError |= true;
            //}
            //if (haveError)
            //    return;

            //if (lbSN.Items.Count>0)
            //    _client .addSerialNumber()
        }

        void smiFileCreateClient_DropDownOpening(Object sender, EventArgs e) {
            this.smiFileCreateClient.Enabled = _client == null;
        }

        void btnShowSNs_Click(Object sender, EventArgs e) {
            Debug.Print("here");
        }
    }
}